name: SPARQL Query Validation and RDF Conversion

# Grant permissions to write to issues
permissions:
  issues: write
  pull-requests: write

on:
  issues:
    types: [opened]

jobs:
  validate_and_convert_to_rdf:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install SPARQLWrapper rdflib

    # Step 1: Validate SPARQL query
    - name: Validate SPARQL query
      id: validate
      run: |
        python scripts/validate_sparql.py
      env:
        GITHUB_ISSUE_BODY: ${{ github.event.issue.body }}

    # Step 2: Post comment and close issue if SPARQL is invalid
    - name: Post comment on invalid query and close the issue
      if: failure()
      run: |
        ISSUE_NUMBER=${{ github.event.issue.number }}
        COMMENT_BODY="The SPARQL query you submitted is invalid. Please check the syntax and try again."
        gh api repos/${{ github.repository }}/issues/${ISSUE_NUMBER}/comments -f body="$COMMENT_BODY"
        gh api repos/${{ github.repository }}/issues/${ISSUE_NUMBER} -X PATCH -f state="closed"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Step 3: Directly convert issue form to RDF with MD5 hash of SPARQL query
    - name: Convert issue form to RDF with MD5 hash
      if: success()  # Only run this step if the SPARQL validation was successful
      run: |
        python scripts/convert_form_to_rdf.py
      env:
        GITHUB_ISSUE_BODY: ${{ github.event.issue.body }}

    # Step 4: Upload the RDF as an artifact
    - name: Upload RDF as an artifact
      if: success()  # Only upload if the conversion was successful
      uses: actions/upload-artifact@v3
      with:
        name: issue-rdf-artifact
        path: issue_output.ttl
